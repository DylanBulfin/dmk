//! This module contains the model for an idealized standard keyboard. That is, it contains all
//! valid keys in valid states (pressed or unpressed)

use crate::event::{Event, Key, KeyEvent};

pub struct VirtualKeyboard {
    pub locks: Locks,
    pub keys: VirtualKeys,
}

pub struct Locks {
    pub scroll_lock: bool,
    pub num_lock: bool,
    pub caps_lock: bool,
}

pub struct VirtualKeys {
    // Alphas
    pub a: bool,
    pub b: bool,
    pub c: bool,
    pub d: bool,
    pub e: bool,
    pub f: bool,
    pub g: bool,
    pub h: bool,
    pub i: bool,
    pub j: bool,
    pub k: bool,
    pub l: bool,
    pub m: bool,
    pub n: bool,
    pub o: bool,
    pub p: bool,
    pub q: bool,
    pub r: bool,
    pub s: bool,
    pub t: bool,
    pub u: bool,
    pub v: bool,
    pub w: bool,
    pub x: bool,
    pub y: bool,
    pub z: bool,

    // Nums
    pub n1: bool,
    pub n2: bool,
    pub n3: bool,
    pub n4: bool,
    pub n5: bool,
    pub n6: bool,
    pub n7: bool,
    pub n8: bool,
    pub n9: bool,
    pub n0: bool,

    // Mods
    pub lalt: bool,
    pub ralt: bool,
    pub lgui: bool,
    pub rgui: bool,
    pub lctl: bool,
    pub rctl: bool,
    pub lsft: bool,
    pub rsft: bool,

    // Directions
    pub up: bool,
    pub down: bool,
    pub left: bool,
    pub right: bool,

    // Function Keys
    pub f1: bool,
    pub f2: bool,
    pub f3: bool,
    pub f4: bool,
    pub f5: bool,
    pub f6: bool,
    pub f7: bool,
    pub f8: bool,
    pub f9: bool,
    pub f10: bool,
    pub f11: bool,
    pub f12: bool,
    pub f13: bool,
    pub f14: bool,
    pub f15: bool,
    pub f16: bool,
    pub f17: bool,
    pub f18: bool,
    pub f19: bool,
    pub f20: bool,
    pub f21: bool,
    pub f22: bool,
    pub f23: bool,
    pub f24: bool,

    // Nav Keys
    pub home: bool,
    pub end: bool,
    pub pg_dn: bool,
    pub pg_up: bool,

    // Symbols
    pub dot: bool,
    pub comma: bool,
    pub btick: bool,
    pub fslash: bool,
    pub bslash: bool,
    pub dash: bool,
    pub equal: bool,
    pub lbrack: bool,
    pub rbrack: bool,

    // Control
    pub space: bool,
    pub enter: bool,
    pub bspace: bool,
    pub del: bool,
    pub esc: bool,
}

impl VirtualKeyboard {
    pub fn apply_key_event(&mut self, event: KeyEvent) {
        let key_pointer: &mut bool = match event.key {
            Key::A => &mut (self.keys.a),
            Key::B => &mut (self.keys.b),
            Key::C => &mut (self.keys.c),
            Key::D => &mut (self.keys.d),
            Key::E => &mut (self.keys.e),
            Key::F => &mut (self.keys.f),
            Key::G => &mut (self.keys.g),
            Key::H => &mut (self.keys.h),
            Key::I => &mut (self.keys.i),
            Key::J => &mut (self.keys.j),
            Key::K => &mut (self.keys.k),
            Key::L => &mut (self.keys.l),
            Key::M => &mut (self.keys.m),
            Key::N => &mut (self.keys.n),
            Key::O => &mut (self.keys.o),
            Key::P => &mut (self.keys.p),
            Key::Q => &mut (self.keys.q),
            Key::R => &mut (self.keys.r),
            Key::S => &mut (self.keys.s),
            Key::T => &mut (self.keys.t),
            Key::U => &mut (self.keys.u),
            Key::V => &mut (self.keys.v),
            Key::W => &mut (self.keys.w),
            Key::X => &mut (self.keys.x),
            Key::Y => &mut (self.keys.y),
            Key::Z => &mut (self.keys.z),
            Key::N1 => &mut (self.keys.n1),
            Key::N2 => &mut (self.keys.n2),
            Key::N3 => &mut (self.keys.n3),
            Key::N4 => &mut (self.keys.n4),
            Key::N5 => &mut (self.keys.n5),
            Key::N6 => &mut (self.keys.n6),
            Key::N7 => &mut (self.keys.n7),
            Key::N8 => &mut (self.keys.n8),
            Key::N9 => &mut (self.keys.n9),
            Key::N0 => &mut (self.keys.n0),
            Key::LALT => &mut (self.keys.lalt),
            Key::RALT => &mut (self.keys.ralt),
            Key::LGUI => &mut (self.keys.lgui),
            Key::RGUI => &mut (self.keys.rgui),
            Key::LCTL => &mut (self.keys.lctl),
            Key::RCTL => &mut (self.keys.rctl),
            Key::LSFT => &mut (self.keys.lsft),
            Key::RSFT => &mut (self.keys.rsft),
            Key::UP => &mut (self.keys.up),
            Key::DOWN => &mut (self.keys.down),
            Key::LEFT => &mut (self.keys.left),
            Key::RIGHT => &mut (self.keys.right),
            Key::F1 => &mut (self.keys.f1),
            Key::F2 => &mut (self.keys.f2),
            Key::F3 => &mut (self.keys.f3),
            Key::F4 => &mut (self.keys.f4),
            Key::F5 => &mut (self.keys.f5),
            Key::F6 => &mut (self.keys.f6),
            Key::F7 => &mut (self.keys.f7),
            Key::F8 => &mut (self.keys.f8),
            Key::F9 => &mut (self.keys.f9),
            Key::F10 => &mut (self.keys.f10),
            Key::F11 => &mut (self.keys.f11),
            Key::F12 => &mut (self.keys.f12),
            Key::F13 => &mut (self.keys.f13),
            Key::F14 => &mut (self.keys.f14),
            Key::F15 => &mut (self.keys.f15),
            Key::F16 => &mut (self.keys.f16),
            Key::F17 => &mut (self.keys.f17),
            Key::F18 => &mut (self.keys.f18),
            Key::F19 => &mut (self.keys.f19),
            Key::F20 => &mut (self.keys.f20),
            Key::F21 => &mut (self.keys.f21),
            Key::F22 => &mut (self.keys.f22),
            Key::F23 => &mut (self.keys.f23),
            Key::F24 => &mut (self.keys.f24),
            Key::HOME => &mut (self.keys.home),
            Key::END => &mut (self.keys.end),
            Key::PGDN => &mut (self.keys.pg_dn),
            Key::PGUP => &mut (self.keys.pg_up),
            Key::DOT => &mut (self.keys.dot),
            Key::COMMA => &mut (self.keys.comma),
            Key::BTICK => &mut (self.keys.btick),
            Key::FSLASH => &mut (self.keys.fslash),
            Key::BSLASH => &mut (self.keys.bslash),
            Key::DASH => &mut (self.keys.dash),
            Key::EQUAL => &mut (self.keys.equal),
            Key::LBRACK => &mut (self.keys.lbrack),
            Key::RBRACK => &mut (self.keys.rbrack),
            Key::SPACE => &mut (self.keys.space),
            Key::ENTER => &mut (self.keys.enter),
            Key::BSPACE => &mut (self.keys.bspace),
            Key::DEL => &mut (self.keys.del),
            Key::ESC => &mut (self.keys.esc),
        };

        *key_pointer = event.is_press;
    }
}
